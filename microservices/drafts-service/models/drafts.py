from pydantic           import BaseModel, EmailStr
from typing             import List, Optional
from enum               import Enum


##########################################################
###################                    ###################
###################   Helper Classes   ###################
###################                    ###################
##########################################################
class DraftStatus(Enum):
    pending     = 'pending'
    approved    = 'approved'
    sent        = 'sent'

    # def __repr__(self):
    #     return self._value_


##########################################################
###################                    ###################
###################  Pydantic Models   ###################
###################                    ###################
##########################################################

'''
NOTE: here you can find two types of models:
    1. models that represent the data we send/receive from/to the client.
    2. models that represent the data we send/receive from/to the database
    converting from the first type to the second type is done throw draft_service.py
'''
class DraftCreate(BaseModel):
    thread_id: Optional[str] = None         # (optional) Gmail thread ID, if itâ€™s part of a conversation
    subject: str                            # Subject of the email
    body: str                               # Content of the email
    to: List[EmailStr]                      # List of recipient email addresses
    from_ai: bool = True                    # Boolean indicating if the draft was generated by AI (default is True)

class DraftDB(DraftCreate):
    draft_id: str                           # in uuid4 formate
    user_id: str                            # 
    status: DraftStatus                     # pending | approved | sent
    created_at: str                         # creation time as string in isoformat
    updated_at: str                         # last update time as string in isoformat
    sent_at: Optional[str] = None           # seding time as string in isoformat, or None if not sent yet


class DraftUpdate(BaseModel):
    subject: Optional[str]
    body: Optional[str]
    to: Optional[List[EmailStr]]

class DraftUpdateDB(DraftUpdate):
    updated_at: str

